/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **Address**
   * - Table in database
   */
  export namespace Address {
    export type Table = 'Address';
    export interface Selectable {
      /**
      * **Address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Address_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **Address.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: Buffer;
    }
    export interface JSONSelectable {
      /**
      * **Address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Address_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Address.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: db.ByteArrayString;
    }
    export interface Whereable {
      /**
      * **Address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Address_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Address.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Address_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **Address.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Address.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Address_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Address.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Address_payload_key' | 'Address_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **AddressCredentialRelation**
   * - Table in database
   */
  export namespace AddressCredentialRelation {
    export type Table = 'AddressCredentialRelation';
    export interface Selectable {
      /**
      * **AddressCredentialRelation.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: db.Int8String;
      /**
      * **AddressCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: db.Int8String;
      /**
      * **AddressCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number;
    }
    export interface JSONSelectable {
      /**
      * **AddressCredentialRelation.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: number;
      /**
      * **AddressCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: number;
      /**
      * **AddressCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number;
    }
    export interface Whereable {
      /**
      * **AddressCredentialRelation.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **AddressCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **AddressCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **AddressCredentialRelation.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **AddressCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **AddressCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **AddressCredentialRelation.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **AddressCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **AddressCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'address_credential-pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **AssetMint**
   * - Table in database
   */
  export namespace AssetMint {
    export type Table = 'AssetMint';
    export interface Selectable {
      /**
      * **AssetMint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: db.Int8String;
      /**
      * **AssetMint.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: db.Int8String;
      /**
      * **AssetMint.amount**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      amount: db.Int8String;
    }
    export interface JSONSelectable {
      /**
      * **AssetMint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: number;
      /**
      * **AssetMint.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: number;
      /**
      * **AssetMint.amount**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      amount: number;
    }
    export interface Whereable {
      /**
      * **AssetMint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **AssetMint.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **AssetMint.amount**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      amount?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **AssetMint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **AssetMint.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **AssetMint.amount**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      amount: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **AssetMint.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **AssetMint.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **AssetMint.amount**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      amount?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'asset_mint-pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Block**
   * - Table in database
   */
  export namespace Block {
    export type Table = 'Block';
    export interface Selectable {
      /**
      * **Block.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Block_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Block.era**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      era: number;
      /**
      * **Block.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: Buffer;
      /**
      * **Block.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      height: number;
      /**
      * **Block.epoch**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      epoch: number;
      /**
      * **Block.slot**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      slot: number;
    }
    export interface JSONSelectable {
      /**
      * **Block.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Block_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Block.era**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      era: number;
      /**
      * **Block.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: db.ByteArrayString;
      /**
      * **Block.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      height: number;
      /**
      * **Block.epoch**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      epoch: number;
      /**
      * **Block.slot**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      slot: number;
    }
    export interface Whereable {
      /**
      * **Block.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Block_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Block.era**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      era?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Block.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Block.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      height?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Block.epoch**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      epoch?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Block.slot**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      slot?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Block.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Block_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **Block.era**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      era: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Block.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **Block.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      height: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Block.epoch**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      epoch: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Block.slot**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      slot: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Block.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"Block_id_seq"'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **Block.era**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      era?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Block.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **Block.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      height?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Block.epoch**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      epoch?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Block.slot**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      slot?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Block_hash_key' | 'Block_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Cip25Entry**
   * - Table in database
   */
  export namespace Cip25Entry {
    export type Table = 'Cip25Entry';
    export interface Selectable {
      /**
      * **Cip25Entry.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Cip25Entry_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **Cip25Entry.metadata_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      metadata_id: db.Int8String;
      /**
      * **Cip25Entry.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: db.Int8String;
      /**
      * **Cip25Entry.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: Buffer;
    }
    export interface JSONSelectable {
      /**
      * **Cip25Entry.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Cip25Entry_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Cip25Entry.metadata_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      metadata_id: number;
      /**
      * **Cip25Entry.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: number;
      /**
      * **Cip25Entry.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: db.ByteArrayString;
    }
    export interface Whereable {
      /**
      * **Cip25Entry.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Cip25Entry_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Cip25Entry.metadata_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      metadata_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Cip25Entry.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Cip25Entry.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Cip25Entry.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Cip25Entry_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **Cip25Entry.metadata_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      metadata_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **Cip25Entry.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **Cip25Entry.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Cip25Entry.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Cip25Entry_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Cip25Entry.metadata_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      metadata_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **Cip25Entry.asset_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      asset_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **Cip25Entry.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Cip25Entry_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **NativeAsset**
   * - Table in database
   */
  export namespace NativeAsset {
    export type Table = 'NativeAsset';
    export interface Selectable {
      /**
      * **NativeAsset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"NativeAsset_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **NativeAsset.policy_id**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      policy_id: Buffer;
      /**
      * **NativeAsset.asset_name**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      asset_name: Buffer;
    }
    export interface JSONSelectable {
      /**
      * **NativeAsset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"NativeAsset_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **NativeAsset.policy_id**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      policy_id: db.ByteArrayString;
      /**
      * **NativeAsset.asset_name**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      asset_name: db.ByteArrayString;
    }
    export interface Whereable {
      /**
      * **NativeAsset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"NativeAsset_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **NativeAsset.policy_id**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      policy_id?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **NativeAsset.asset_name**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      asset_name?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **NativeAsset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"NativeAsset_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **NativeAsset.policy_id**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      policy_id: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **NativeAsset.asset_name**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      asset_name: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **NativeAsset.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"NativeAsset_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **NativeAsset.policy_id**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      policy_id?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **NativeAsset.asset_name**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      asset_name?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'NativeAsset_pkey' | 'index-native_asset-pair';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **StakeCredential**
   * - Table in database
   */
  export namespace StakeCredential {
    export type Table = 'StakeCredential';
    export interface Selectable {
      /**
      * **StakeCredential.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"StakeCredential_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **StakeCredential.credential**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      credential: Buffer;
    }
    export interface JSONSelectable {
      /**
      * **StakeCredential.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"StakeCredential_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **StakeCredential.credential**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      credential: db.ByteArrayString;
    }
    export interface Whereable {
      /**
      * **StakeCredential.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"StakeCredential_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **StakeCredential.credential**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      credential?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **StakeCredential.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"StakeCredential_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **StakeCredential.credential**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      credential: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **StakeCredential.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"StakeCredential_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **StakeCredential.credential**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      credential?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'StakeCredential_credential_key' | 'StakeCredential_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **Transaction**
   * - Table in database
   */
  export namespace Transaction {
    export type Table = 'Transaction';
    export interface Selectable {
      /**
      * **Transaction.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Transaction_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **Transaction.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: Buffer;
      /**
      * **Transaction.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number;
      /**
      * **Transaction.tx_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tx_index: number;
      /**
      * **Transaction.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: Buffer;
      /**
      * **Transaction.is_valid**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_valid: boolean;
    }
    export interface JSONSelectable {
      /**
      * **Transaction.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Transaction_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **Transaction.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: db.ByteArrayString;
      /**
      * **Transaction.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number;
      /**
      * **Transaction.tx_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tx_index: number;
      /**
      * **Transaction.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: db.ByteArrayString;
      /**
      * **Transaction.is_valid**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_valid: boolean;
    }
    export interface Whereable {
      /**
      * **Transaction.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Transaction_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Transaction.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Transaction.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Transaction.tx_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tx_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Transaction.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **Transaction.is_valid**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_valid?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **Transaction.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Transaction_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **Transaction.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **Transaction.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Transaction.tx_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tx_index: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **Transaction.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **Transaction.is_valid**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_valid: boolean | db.Parameter<boolean> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **Transaction.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"Transaction_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **Transaction.hash**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      hash?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **Transaction.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Transaction.tx_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tx_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **Transaction.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **Transaction.is_valid**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_valid?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
    }
    export type UniqueIndex = 'Transaction_hash_key' | 'Transaction_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TransactionInput**
   * - Table in database
   */
  export namespace TransactionInput {
    export type Table = 'TransactionInput';
    export interface Selectable {
      /**
      * **TransactionInput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionInput_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **TransactionInput.utxo_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      utxo_id: db.Int8String;
      /**
      * **TransactionInput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: db.Int8String;
      /**
      * **TransactionInput.input_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      input_index: number;
    }
    export interface JSONSelectable {
      /**
      * **TransactionInput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionInput_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **TransactionInput.utxo_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      utxo_id: number;
      /**
      * **TransactionInput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: number;
      /**
      * **TransactionInput.input_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      input_index: number;
    }
    export interface Whereable {
      /**
      * **TransactionInput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionInput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionInput.utxo_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      utxo_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionInput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionInput.input_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      input_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **TransactionInput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionInput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **TransactionInput.utxo_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      utxo_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TransactionInput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TransactionInput.input_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      input_index: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **TransactionInput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionInput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **TransactionInput.utxo_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      utxo_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TransactionInput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TransactionInput.input_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      input_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'TransactionInput_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TransactionMetadata**
   * - Table in database
   */
  export namespace TransactionMetadata {
    export type Table = 'TransactionMetadata';
    export interface Selectable {
      /**
      * **TransactionMetadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionMetadata_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **TransactionMetadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: db.Int8String;
      /**
      * **TransactionMetadata.label**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      label: Buffer;
      /**
      * **TransactionMetadata.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: Buffer;
    }
    export interface JSONSelectable {
      /**
      * **TransactionMetadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionMetadata_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **TransactionMetadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: number;
      /**
      * **TransactionMetadata.label**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      label: db.ByteArrayString;
      /**
      * **TransactionMetadata.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: db.ByteArrayString;
    }
    export interface Whereable {
      /**
      * **TransactionMetadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionMetadata_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionMetadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionMetadata.label**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      label?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionMetadata.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **TransactionMetadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionMetadata_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **TransactionMetadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TransactionMetadata.label**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      label: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **TransactionMetadata.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **TransactionMetadata.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionMetadata_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **TransactionMetadata.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TransactionMetadata.label**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      label?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **TransactionMetadata.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'TransactionMetadata_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TransactionOutput**
   * - Table in database
   */
  export namespace TransactionOutput {
    export type Table = 'TransactionOutput';
    export interface Selectable {
      /**
      * **TransactionOutput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionOutput_id_seq"'::regclass)`
      */
      id: db.Int8String;
      /**
      * **TransactionOutput.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: Buffer;
      /**
      * **TransactionOutput.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: db.Int8String;
      /**
      * **TransactionOutput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: db.Int8String;
      /**
      * **TransactionOutput.output_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      output_index: number;
    }
    export interface JSONSelectable {
      /**
      * **TransactionOutput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionOutput_id_seq"'::regclass)`
      */
      id: number;
      /**
      * **TransactionOutput.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: db.ByteArrayString;
      /**
      * **TransactionOutput.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: number;
      /**
      * **TransactionOutput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: number;
      /**
      * **TransactionOutput.output_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      output_index: number;
    }
    export interface Whereable {
      /**
      * **TransactionOutput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionOutput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionOutput.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionOutput.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionOutput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TransactionOutput.output_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      output_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **TransactionOutput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionOutput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment;
      /**
      * **TransactionOutput.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      /**
      * **TransactionOutput.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TransactionOutput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TransactionOutput.output_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      output_index: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **TransactionOutput.id**
      * - `int8` in database
      * - `NOT NULL`, default: `nextval('"TransactionOutput_id_seq"'::regclass)`
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.DefaultType | db.SQLFragment>;
      /**
      * **TransactionOutput.payload**
      * - `bytea` in database
      * - `NOT NULL`, no default
      */
      payload?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      /**
      * **TransactionOutput.address_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      address_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TransactionOutput.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TransactionOutput.output_index**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      output_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'TransactionOutput_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **TxCredentialRelation**
   * - Table in database
   */
  export namespace TxCredentialRelation {
    export type Table = 'TxCredentialRelation';
    export interface Selectable {
      /**
      * **TxCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: db.Int8String;
      /**
      * **TxCredentialRelation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: db.Int8String;
      /**
      * **TxCredentialRelation.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number;
      /**
      * **TxCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number;
    }
    export interface JSONSelectable {
      /**
      * **TxCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: number;
      /**
      * **TxCredentialRelation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: number;
      /**
      * **TxCredentialRelation.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number;
      /**
      * **TxCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number;
    }
    export interface Whereable {
      /**
      * **TxCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TxCredentialRelation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TxCredentialRelation.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **TxCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **TxCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TxCredentialRelation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      /**
      * **TxCredentialRelation.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **TxCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **TxCredentialRelation.credential_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      credential_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TxCredentialRelation.tx_id**
      * - `int8` in database
      * - `NOT NULL`, no default
      */
      tx_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      /**
      * **TxCredentialRelation.block_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **TxCredentialRelation.relation**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      relation?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tx_credential-pk';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = Address.Table | AddressCredentialRelation.Table | AssetMint.Table | Block.Table | Cip25Entry.Table | NativeAsset.Table | StakeCredential.Table | Transaction.Table | TransactionInput.Table | TransactionMetadata.Table | TransactionOutput.Table | TxCredentialRelation.Table;
  export type Selectable = Address.Selectable | AddressCredentialRelation.Selectable | AssetMint.Selectable | Block.Selectable | Cip25Entry.Selectable | NativeAsset.Selectable | StakeCredential.Selectable | Transaction.Selectable | TransactionInput.Selectable | TransactionMetadata.Selectable | TransactionOutput.Selectable | TxCredentialRelation.Selectable;
  export type JSONSelectable = Address.JSONSelectable | AddressCredentialRelation.JSONSelectable | AssetMint.JSONSelectable | Block.JSONSelectable | Cip25Entry.JSONSelectable | NativeAsset.JSONSelectable | StakeCredential.JSONSelectable | Transaction.JSONSelectable | TransactionInput.JSONSelectable | TransactionMetadata.JSONSelectable | TransactionOutput.JSONSelectable | TxCredentialRelation.JSONSelectable;
  export type Whereable = Address.Whereable | AddressCredentialRelation.Whereable | AssetMint.Whereable | Block.Whereable | Cip25Entry.Whereable | NativeAsset.Whereable | StakeCredential.Whereable | Transaction.Whereable | TransactionInput.Whereable | TransactionMetadata.Whereable | TransactionOutput.Whereable | TxCredentialRelation.Whereable;
  export type Insertable = Address.Insertable | AddressCredentialRelation.Insertable | AssetMint.Insertable | Block.Insertable | Cip25Entry.Insertable | NativeAsset.Insertable | StakeCredential.Insertable | Transaction.Insertable | TransactionInput.Insertable | TransactionMetadata.Insertable | TransactionOutput.Insertable | TxCredentialRelation.Insertable;
  export type Updatable = Address.Updatable | AddressCredentialRelation.Updatable | AssetMint.Updatable | Block.Updatable | Cip25Entry.Updatable | NativeAsset.Updatable | StakeCredential.Updatable | Transaction.Updatable | TransactionInput.Updatable | TransactionMetadata.Updatable | TransactionOutput.Updatable | TxCredentialRelation.Updatable;
  export type UniqueIndex = Address.UniqueIndex | AddressCredentialRelation.UniqueIndex | AssetMint.UniqueIndex | Block.UniqueIndex | Cip25Entry.UniqueIndex | NativeAsset.UniqueIndex | StakeCredential.UniqueIndex | Transaction.UniqueIndex | TransactionInput.UniqueIndex | TransactionMetadata.UniqueIndex | TransactionOutput.UniqueIndex | TxCredentialRelation.UniqueIndex;
  export type Column = Address.Column | AddressCredentialRelation.Column | AssetMint.Column | Block.Column | Cip25Entry.Column | NativeAsset.Column | StakeCredential.Column | Transaction.Column | TransactionInput.Column | TransactionMetadata.Column | TransactionOutput.Column | TxCredentialRelation.Column;
  export type AllBaseTables = [Address.Table, AddressCredentialRelation.Table, AssetMint.Table, Block.Table, Cip25Entry.Table, NativeAsset.Table, StakeCredential.Table, Transaction.Table, TransactionInput.Table, TransactionMetadata.Table, TransactionOutput.Table, TxCredentialRelation.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [Address.Table, AddressCredentialRelation.Table, AssetMint.Table, Block.Table, Cip25Entry.Table, NativeAsset.Table, StakeCredential.Table, Transaction.Table, TransactionInput.Table, TransactionMetadata.Table, TransactionOutput.Table, TxCredentialRelation.Table];


  export type SelectableForTable<T extends Table> = {
    Address: Address.Selectable;
    AddressCredentialRelation: AddressCredentialRelation.Selectable;
    AssetMint: AssetMint.Selectable;
    Block: Block.Selectable;
    Cip25Entry: Cip25Entry.Selectable;
    NativeAsset: NativeAsset.Selectable;
    StakeCredential: StakeCredential.Selectable;
    Transaction: Transaction.Selectable;
    TransactionInput: TransactionInput.Selectable;
    TransactionMetadata: TransactionMetadata.Selectable;
    TransactionOutput: TransactionOutput.Selectable;
    TxCredentialRelation: TxCredentialRelation.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    Address: Address.JSONSelectable;
    AddressCredentialRelation: AddressCredentialRelation.JSONSelectable;
    AssetMint: AssetMint.JSONSelectable;
    Block: Block.JSONSelectable;
    Cip25Entry: Cip25Entry.JSONSelectable;
    NativeAsset: NativeAsset.JSONSelectable;
    StakeCredential: StakeCredential.JSONSelectable;
    Transaction: Transaction.JSONSelectable;
    TransactionInput: TransactionInput.JSONSelectable;
    TransactionMetadata: TransactionMetadata.JSONSelectable;
    TransactionOutput: TransactionOutput.JSONSelectable;
    TxCredentialRelation: TxCredentialRelation.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    Address: Address.Whereable;
    AddressCredentialRelation: AddressCredentialRelation.Whereable;
    AssetMint: AssetMint.Whereable;
    Block: Block.Whereable;
    Cip25Entry: Cip25Entry.Whereable;
    NativeAsset: NativeAsset.Whereable;
    StakeCredential: StakeCredential.Whereable;
    Transaction: Transaction.Whereable;
    TransactionInput: TransactionInput.Whereable;
    TransactionMetadata: TransactionMetadata.Whereable;
    TransactionOutput: TransactionOutput.Whereable;
    TxCredentialRelation: TxCredentialRelation.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    Address: Address.Insertable;
    AddressCredentialRelation: AddressCredentialRelation.Insertable;
    AssetMint: AssetMint.Insertable;
    Block: Block.Insertable;
    Cip25Entry: Cip25Entry.Insertable;
    NativeAsset: NativeAsset.Insertable;
    StakeCredential: StakeCredential.Insertable;
    Transaction: Transaction.Insertable;
    TransactionInput: TransactionInput.Insertable;
    TransactionMetadata: TransactionMetadata.Insertable;
    TransactionOutput: TransactionOutput.Insertable;
    TxCredentialRelation: TxCredentialRelation.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    Address: Address.Updatable;
    AddressCredentialRelation: AddressCredentialRelation.Updatable;
    AssetMint: AssetMint.Updatable;
    Block: Block.Updatable;
    Cip25Entry: Cip25Entry.Updatable;
    NativeAsset: NativeAsset.Updatable;
    StakeCredential: StakeCredential.Updatable;
    Transaction: Transaction.Updatable;
    TransactionInput: TransactionInput.Updatable;
    TransactionMetadata: TransactionMetadata.Updatable;
    TransactionOutput: TransactionOutput.Updatable;
    TxCredentialRelation: TxCredentialRelation.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    Address: Address.UniqueIndex;
    AddressCredentialRelation: AddressCredentialRelation.UniqueIndex;
    AssetMint: AssetMint.UniqueIndex;
    Block: Block.UniqueIndex;
    Cip25Entry: Cip25Entry.UniqueIndex;
    NativeAsset: NativeAsset.UniqueIndex;
    StakeCredential: StakeCredential.UniqueIndex;
    Transaction: Transaction.UniqueIndex;
    TransactionInput: TransactionInput.UniqueIndex;
    TransactionMetadata: TransactionMetadata.UniqueIndex;
    TransactionOutput: TransactionOutput.UniqueIndex;
    TxCredentialRelation: TxCredentialRelation.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    Address: Address.Column;
    AddressCredentialRelation: AddressCredentialRelation.Column;
    AssetMint: AssetMint.Column;
    Block: Block.Column;
    Cip25Entry: Cip25Entry.Column;
    NativeAsset: NativeAsset.Column;
    StakeCredential: StakeCredential.Column;
    Transaction: Transaction.Column;
    TransactionInput: TransactionInput.Column;
    TransactionMetadata: TransactionMetadata.Column;
    TransactionOutput: TransactionOutput.Column;
    TxCredentialRelation: TxCredentialRelation.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    Address: Address.SQL;
    AddressCredentialRelation: AddressCredentialRelation.SQL;
    AssetMint: AssetMint.SQL;
    Block: Block.SQL;
    Cip25Entry: Cip25Entry.SQL;
    NativeAsset: NativeAsset.SQL;
    StakeCredential: StakeCredential.SQL;
    Transaction: Transaction.SQL;
    TransactionInput: TransactionInput.SQL;
    TransactionMetadata: TransactionMetadata.SQL;
    TransactionOutput: TransactionOutput.SQL;
    TxCredentialRelation: TxCredentialRelation.SQL;
  }[T];

}
