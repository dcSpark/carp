"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[179],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),o=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=o(r),k=n,m=p["".concat(d,".").concat(k)]||p[k]||c[k]||l;return r?a.createElement(m,i(i({ref:t},u),{},{components:r})):a.createElement(m,i({ref:t},u))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=p;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var o=2;o<l;o++)i[o]=r[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6987:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=r(7462),n=(r(7294),r(3905));const l={},i="MultieraAddressCredentialRelationTask",s={unversionedId:"indexer/Tasks/MultieraAddressCredentialRelationTask",id:"indexer/Tasks/MultieraAddressCredentialRelationTask",title:"MultieraAddressCredentialRelationTask",description:"Adds to the database the relation between addresses and the credentials part of the addresses \\(ex: payment key \\+ staking key\\)",source:"@site/docs/indexer/Tasks/MultieraAddressCredentialRelationTask.md",sourceDirName:"indexer/Tasks",slug:"/indexer/Tasks/MultieraAddressCredentialRelationTask",permalink:"/carp/docs/indexer/Tasks/MultieraAddressCredentialRelationTask",draft:!1,editUrl:"https://github.com/dcSpark/carp/docs/indexer/Tasks/MultieraAddressCredentialRelationTask.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MultiEraProjectedNftTask",permalink:"/carp/docs/indexer/Tasks/MultiEraProjectedNftTask"},next:{title:"MultieraAddressDelegationTask",permalink:"/carp/docs/indexer/Tasks/MultieraAddressDelegationTask"}},d={},o=[{value:"Era",id:"era",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Data accessed",id:"data-accessed",level:2},{value:"Reads from",id:"reads-from",level:4},{value:"Full source",id:"full-source",level:2}],u={toc:o};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"multieraaddresscredentialrelationtask"},"MultieraAddressCredentialRelationTask"),(0,n.kt)("p",null,"Adds to the database the relation between addresses and the credentials part of the addresses ","(","ex: payment key ","+"," staking key",")"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Configuration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Clone, Copy, serde::Deserialize, serde::Serialize)]\npub struct ReadonlyConfig {\n    pub readonly: bool,\n}\n\n"))),(0,n.kt)("h2",{id:"era"},"Era"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"multiera")),(0,n.kt)("h2",{id:"dependencies"},"Dependencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./MultieraAddressTask"},"MultieraAddressTask")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./MultieraStakeCredentialTask"},"MultieraStakeCredentialTask"))),(0,n.kt)("h2",{id:"data-accessed"},"Data accessed"),(0,n.kt)("h4",{id:"reads-from"},"Reads from"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"multiera_addresses")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"multiera_queued_addresses_relations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"multiera_stake_credential"))),(0,n.kt)("h2",{id:"full-source"},"Full source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/dcSpark/carp/tree/main/indexer/tasks/src/multiera/multiera_address_credential_relations.rs"},"source")))}c.isMDXComponent=!0}}]);