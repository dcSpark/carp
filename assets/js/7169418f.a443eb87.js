"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1387],{3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(7462),s=(n(7294),n(3905)),a=n(814);const o={sidebar_position:2},i="Client API",c={unversionedId:"webserver/client",id:"webserver/client",title:"Client API",description:"You can find the OpenAPI / swagger definition here",source:"@site/docs/webserver/client.mdx",sourceDirName:"webserver",slug:"/webserver/client",permalink:"/carp/docs/webserver/client",draft:!1,editUrl:"https://github.com/dcSpark/carp/docs/webserver/client.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core pillars",permalink:"/carp/docs/webserver/intro"},next:{title:"Pagination Philosophy",permalink:"/carp/docs/webserver/pagination"}},l={},p=[{value:"You can find the OpenAPI / swagger definition here",id:"you-can-find-the-openapi--swagger-definition-here",level:3},{value:"Example",id:"example",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"client-api"},"Client API"),(0,s.kt)("h3",{id:"you-can-find-the-openapi--swagger-definition-here"},"You can find the OpenAPI / swagger definition ",(0,s.kt)("a",{parentName:"h3",href:"/openapi"},"here")),(0,s.kt)("p",null,"NPM link ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@dcspark/carp-client"},"here")),(0,s.kt)("p",null,"We provide a Typescript client for ease of use from Javascript, we also provide an OpenAPI / Swagger definition. This helps with"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Writing clients for other languages"),(0,s.kt)("li",{parentName:"ul"},"Having human-readable documentation for the API")),(0,s.kt)("p",null,"If you want to write your own client, you can refer to the ",(0,s.kt)("a",{parentName:"p",href:"/carp/docs/indexer/sql"},"sql format")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"Here are some examples of common use-cases"),(0,s.kt)(a.Z,{language:"typescript",title:"example.ts",showLineNumbers:!0,mdxType:"CodeBlock"},'import { Routes } from "@dcspark/carp-client/shared/routes";\nimport {\n  nftCborToJson,\n  paginatedMetadataNft,\n  paginatedTransactionHistory,\n} from "@dcspark/carp-client/client/src/paginated";\nimport { query } from "@dcspark/carp-client/client/src/index";\nimport cml from "@dcspark/cardano-multiplatform-lib-nodejs";\nimport type { TransactionHistoryResponse } from "@dcspark/carp-client/shared/models/TransactionHistory";\n\nconst urlBase = "http://localhost:3000";\n\nasync function getHistoryForAddress(\n  bech32Address: string\n): Promise<TransactionHistoryResponse> {\n  const bestBlock = await query(urlBase, Routes.blockLatest, {\n    // the higher you make this, the less you have to worry about rollbacks\n    // but also the slower your app will react to new transactions by the user\n    // you can look into projects like Cardano multiverse-rs to optimize this number\n    offset: 3,\n  });\n\n  const wasmAddr = cml.Address.from_bech32(bech32Address);\n  const paymentKey = cml.BaseAddress.from_address(wasmAddr)?.payment();\n  if (paymentKey == null) throw new Error();\n\n  const stakingKey = cml.BaseAddress.from_address(wasmAddr)?.stake();\n  if (stakingKey == null) throw new Error();\n\n  const result = await paginatedTransactionHistory(urlBase, {\n    addresses: [\n      // Note: querying both the payment key & staking key here is different from querying the base32 address directly\n      // Both methods are supported by Carp (and multiple different kinds of inputs too)\n      // Be sure to pick the method that best works for you as they will give different results\n      Buffer.from(paymentKey.to_cbor_bytes()).toString("hex"),\n      Buffer.from(stakingKey.to_cbor_bytes()).toString("hex"),\n    ],\n    untilBlock: bestBlock.block.hash,\n  });\n  return result;\n}\n\nasync function getNftInfo(\n  policyId: string,\n  assetName: string\n): Promise<string> {\n  const nftInfo = await paginatedMetadataNft(urlBase, {\n    assets: { [policyId]: [assetName] },\n  });\n\n  const jsonInfo = nftCborToJson(\n    nftInfo,\n    cml.TransactionMetadatum,\n    cml.decode_metadatum_to_json_str,\n    cml.MetadataJsonSchema.BasicConversions\n  );\n\n  return jsonInfo.cip25[policyId][assetName];\n}\n'))}m.isMDXComponent=!0}}]);