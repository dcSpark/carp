"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8271],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(k,i(i({ref:n},d),{},{components:t})):a.createElement(k,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6771:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:3},i="Running",l={unversionedId:"indexer/run",id:"indexer/run",title:"Running",description:"To run carp you need to configure carp itself, set up / configure cardano-node (or use remote one), configure postgres and env variables. For mainnet we provide example .env file and carp default configuration, so you can jump directly to setting up cardano-node section.",source:"@site/docs/indexer/run.md",sourceDirName:"indexer",slug:"/indexer/run",permalink:"/carp/docs/indexer/run",draft:!1,editUrl:"https://github.com/dcSpark/carp/docs/indexer/run.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Example Execution Plan",permalink:"/carp/docs/indexer/example_plan"},next:{title:"Migrations & Rollbacks",permalink:"/carp/docs/indexer/migrations"}},p={},s=[{value:"Configuration &amp; concepts",id:"configuration--concepts",level:2},{value:"Sink configuration",id:"sink-configuration",level:3},{value:"Source configuration",id:"source-configuration",level:3},{value:"Oura source parameters",id:"oura-source-parameters",level:4},{value:"Cardano_net source parameters",id:"cardano_net-source-parameters",level:4},{value:"Setting up cardano-node",id:"setting-up-cardano-node",level:2},{value:"Local node",id:"local-node",level:3},{value:"Remote node",id:"remote-node",level:3},{value:"Setting up the database",id:"setting-up-the-database",level:2},{value:"Running the indexer",id:"running-the-indexer",level:2},{value:"Detailed environment setup",id:"detailed-environment-setup",level:2}],d={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running"},"Running"),(0,r.kt)("p",null,"To run carp you need to configure carp itself, set up / configure cardano-node (or use remote one), configure postgres and env variables. For mainnet we provide example ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dcSpark/carp/blob/main/.env"},".env file")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dcSpark/carp/blob/main/indexer/configs/default.yml"},"carp default configuration"),", so you can jump directly to ",(0,r.kt)("inlineCode",{parentName:"p"},"setting up cardano-node section"),"."),(0,r.kt)("h2",{id:"configuration--concepts"},"Configuration & concepts"),(0,r.kt)("p",null,"Carp itself uses special file for configuration, the examples are stored ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dcSpark/carp/blob/main/indexer/configs/"},"there"),". Besides, carp's config can be set up through ",(0,r.kt)("inlineCode",{parentName:"p"},"CARP_CONFIG")," env variable in json format. Let's dive into configuration a little further:"),(0,r.kt)("p",null,"File format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: oura\n  socket: "relays-new.cardano-mainnet.iohk.io:3001"\n  bearer: Tcp # Unix\n\nsink:\n  type: cardano\n  db:\n    type: postgres\n    database_url: postgresql://carp:1234@localhost:5432/carp_mainnet\n  network: mainnet # preview / preprod / testnet\n\nstart_block:\n')),(0,r.kt)("p",null,"Json format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"source":{"type":"oura","socket":"relays-new.cardano-mainnet.iohk.io:3001","bearer":"Tcp"},"sink":{"type":"cardano","db":{"type": "postgres","database_url":"postgresql://carp:1234@localhost:5432/carp_mainnet"},"network":"mainnet"},"start_block":null}\n')),(0,r.kt)("p",null,"As you might see there are several key sections: source and sink. For sink there's only one option at the moment: ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano")," sink. For source there are two options with different configurations: ",(0,r.kt)("inlineCode",{parentName:"p"},"oura")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano_net"),"."),(0,r.kt)("h3",{id:"sink-configuration"},"Sink configuration"),(0,r.kt)("p",null,"Cardano sink configuration requires the ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"network")," to be configured. "),(0,r.kt)("p",null,"Supported values for ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cardano"))),(0,r.kt)("p",null,"Supported values for ",(0,r.kt)("inlineCode",{parentName:"p"},"network"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mainnet")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preprod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"testnet"))),(0,r.kt)("p",null,"Supported values for ",(0,r.kt)("inlineCode",{parentName:"p"},"db"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postgres"))),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," settings mind the host: in case of docker deployment ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," won't work, you will need to set static ip or container name there."),(0,r.kt)("h3",{id:"source-configuration"},"Source configuration"),(0,r.kt)("p",null,"There are two types of sources: ",(0,r.kt)("inlineCode",{parentName:"p"},"oura")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano_net"),"."),(0,r.kt)("h4",{id:"oura-source-parameters"},"Oura source parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: oura\n  socket: "relays-new.cardano-mainnet.iohk.io:3001"\n  bearer: Tcp # Unix\n')),(0,r.kt)("p",null,"If you work with remote node and plan to fetch data through ",(0,r.kt)("inlineCode",{parentName:"p"},"Tcp"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: oura\n  socket: "remote.node.url"\n  bearer: Tcp # Unix\n')),(0,r.kt)("p",null,"If you work with local node you can fetch data through ",(0,r.kt)("inlineCode",{parentName:"p"},"Unix")," socket as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: oura\n  socket: "path.to.socket"\n  bearer: Unix # Tcp\n')),(0,r.kt)("h4",{id:"cardano_net-source-parameters"},"Cardano_net source parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"source:\n  type: cardano_net\n  relay: \n    - relays-new.cardano-mainnet.iohk.io\n    - 3001\n      # - preview-node.world.dev.cardano.org\n      # - 30002\n      # - preprod-node.world.dev.cardano.org\n      # - 30000\n")),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano_net")," source you should set up ",(0,r.kt)("inlineCode",{parentName:"p"},"relay")," and provide url and port. ",(0,r.kt)("inlineCode",{parentName:"p"},"Unix")," socket is not supported here."),(0,r.kt)("h2",{id:"setting-up-cardano-node"},"Setting up cardano-node"),(0,r.kt)("p",null,"The indexer can work with either local or remote node. "),(0,r.kt)("h3",{id:"local-node"},"Local node"),(0,r.kt)("p",null,"For local node you will have to run a synced copy of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/cardano-node/"},"cardano-node")," and update the configuration file accordingly:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for ",(0,r.kt)("inlineCode",{parentName:"li"},"cardano_net"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Expose port ",(0,r.kt)("inlineCode",{parentName:"li"},"3001")," (default port in cardano node)"),(0,r.kt)("li",{parentName:"ul"},"Update the ",(0,r.kt)("inlineCode",{parentName:"li"},"relay")," with appropriate ip and port "))),(0,r.kt)("li",{parentName:"ul"},"for ",(0,r.kt)("inlineCode",{parentName:"li"},"oura"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Choose whether you want to use unix socket or tcp"),(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"bearer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"socket")," fields in the config accordingly (more details above).")))),(0,r.kt)("h3",{id:"remote-node"},"Remote node"),(0,r.kt)("p",null,"For remote node you will need to update carp's config:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for ",(0,r.kt)("inlineCode",{parentName:"li"},"cardano_net"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Update the relay with appropriate ip and port"))),(0,r.kt)("li",{parentName:"ul"},"for ",(0,r.kt)("inlineCode",{parentName:"li"},"oura"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"bearer")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Tcp")),(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"socket")," to the relay address")))),(0,r.kt)("h2",{id:"setting-up-the-database"},"Setting up the database"),(0,r.kt)("p",null,"Note: steps assume mainnet"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo -u postgres createdb carp_mainnet")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo -u postgres psql -c 'ALTER DATABASE carp_mainnet SET jit_above_cost = -1;'")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo -u postgres createuser carp")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},'sudo -u postgres psql -c "\\password carp"')),(0,r.kt)("li",{parentName:"ol"},"For postgres version 15+ there's a breaking change regarding the permissions, so you will need to run extra command:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo -u postgres psql -t -d carp_mainnet -c 'GRANT ALL ON SCHEMA public TO carp;'")))),(0,r.kt)("li",{parentName:"ol"},"Add your database name, username and password to ",(0,r.kt)("inlineCode",{parentName:"li"},"secrets/.pgpass")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"chmod 600 secrets/.pgpass")),(0,r.kt)("li",{parentName:"ol"},"Modify the env variables in ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," if needed:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Setting ",(0,r.kt)("inlineCode",{parentName:"li"},"POSTGRES_HOST"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"POSTGRES_PORT"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PGUSER"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PGPASSWORD"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"POSTGRES_DB"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PGPASSFILE")," variables is mandatory to run migrations successfully."))),(0,r.kt)("li",{parentName:"ol"},"Modify the carp's config variables for sink:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"host"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"port"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"user"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"password")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"db")," must be set the same values as you created with steps 1-4 and set at step 8"))),(0,r.kt)("li",{parentName:"ol"},"In the root project folder, run ",(0,r.kt)("inlineCode",{parentName:"li"},"set -a; . ./.env; set +a")," - note you will have to re-run this command every time you reopen your shell",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"This step is mandatory to run the migration, it still relies on env variables."))),(0,r.kt)("li",{parentName:"ol"},"Inside the ",(0,r.kt)("inlineCode",{parentName:"li"},"indexer")," folder, run ",(0,r.kt)("inlineCode",{parentName:"li"},"cargo migrate up")," (you can debug migration by adding a ",(0,r.kt)("inlineCode",{parentName:"li"},"-v")," at the end of the command)",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"This creates the necessary tables")))),(0,r.kt)("h2",{id:"running-the-indexer"},"Running the indexer"),(0,r.kt)("p",null,"Inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"indexer")," folder, run ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo run -- --plan execution_plans/default.toml --config-path configs/oura.yml")),(0,r.kt)("p",null,"Reminder: you can visualize the execution plan using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo plan-visualizer --plan execution_plans/default.toml -o plan-visualizer/out")),(0,r.kt)("p",null,"You can use other configs and write your own: e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"configs/cardano_node.yml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"indexer")," folder."),(0,r.kt)("h2",{id:"detailed-environment-setup"},"Detailed environment setup"),(0,r.kt)("p",null,"For non-docker deployment the following variables are mandatory to be configured:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotenv"},'# network can be mainnet/preview/preprod/testnet\n# this parameter is utilized by migration service, cardano-node, backuper\nNETWORK=mainnet\n\n# these credentials are utilized by postgres, carp and carp_web services\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPGUSER=carp\nPGPASSWORD=""\nPOSTGRES_DB=carp_mainnet\nPGPASSFILE="$(realpath secrets/.pgpass)"\n\n# note: PGPASSWORD isn\'t required to run carp\n# since it will be parsed from the PGPASSFILE instead\n# as this command will gracefully fallback to PGPASSFILE if no password is specified\n# However, some dev tools like pgtyped & zapatos don\'t support .pgpass files\nDATABASE_URL=postgresql://${PGUSER}:${PGPASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}\n')),(0,r.kt)("p",null,"Variables related to postgres are described above in ",(0,r.kt)("inlineCode",{parentName:"p"},"Setting up the database")," section."))}u.isMDXComponent=!0}}]);